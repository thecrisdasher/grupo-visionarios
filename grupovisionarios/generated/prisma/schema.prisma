// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String
  password     String
  role         Role    @default(AFFILIATE)
  referralCode String  @unique
  referredBy   String?
  phone        String?
  avatar       String?
  isActive     Boolean @default(true)

  // Unique links
  inviteLink   String? @unique
  statsLink    String? @unique
  trainingLink String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  referredByUser    User?      @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals         User[]     @relation("UserReferrals")
  payments          Payment[]
  invoices          Invoice[]
  referralsMade     Referral[] @relation("ReferrerRelation")
  referralsReceived Referral[] @relation("ReferredRelation")

  @@map("users")
}

// Payment model for Stripe integration
model Payment {
  id              String        @id @default(cuid())
  userId          String
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("COP")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String
  stripePaymentId String?       @unique
  stripeSessionId String?       @unique
  transactionId   String?
  referralId      String?
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  referral Referral? @relation(fields: [referralId], references: [id])
  invoice  Invoice?

  @@map("payments")
}

// Invoice model for PDF generation
model Invoice {
  id            String        @id @default(cuid())
  paymentId     String        @unique
  userId        String
  invoiceNumber String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("COP")
  status        InvoiceStatus @default(PENDING)
  concept       String
  pdfUrl        String?
  emailSent     Boolean       @default(false)
  emailSentAt   DateTime?
  dueDate       DateTime?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  payment Payment @relation(fields: [paymentId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("invoices")
}

// Referral model
model Referral {
  id         String         @id @default(cuid())
  referrerId String
  referredId String
  level      Int            @default(1)
  commission Decimal        @db.Decimal(10, 2)
  status     ReferralStatus @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  referrer User      @relation("ReferrerRelation", fields: [referrerId], references: [id])
  referred User      @relation("ReferredRelation", fields: [referredId], references: [id])
  payments Payment[]

  @@unique([referrerId, referredId])
  @@map("referrals")
}

// Enums
enum Role {
  ADMIN
  AFFILIATE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum InvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum ReferralStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}
