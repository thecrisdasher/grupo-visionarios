// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // default output in node_modules/.prisma/client
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Level model for multilevel system
model Level {
  id                     String  @id @default(cuid())
  name                   String  @unique
  order                  Int     @unique
  commissionRate         Decimal @db.Decimal(5, 2) // Percentage like 25.50
  requirementsDescription String
  color                  String  @default("#3B82F6")
  icon                   String?
  minDirectReferrals     Int     @default(3)
  minIndirectReferrals   Int     @default(9) // 3x3 = 9
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  users User[]

  @@map("levels")
}

// User model
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  password     String
  role         Role     @default(AFFILIATE)
  referralCode String   @unique
  referredBy   String?
  phone        String?
  avatar       String?
  isActive     Boolean  @default(true)
  levelId      String?  // Reference to Level
  
  // Unique links
  inviteLink     String?  @unique
  statsLink      String?  @unique
  trainingLink   String?  @unique
  
  // Multilevel tracking
  directReferralsCount    Int      @default(0)
  indirectReferralsCount  Int      @default(0)
  totalEarnings          Decimal  @default(0) @db.Decimal(10, 2)
  lastPromotionAt        DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  level              Level?     @relation(fields: [levelId], references: [id])
  referredByUser     User?      @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals          User[]     @relation("UserReferrals")
  payments           Payment[]
  invoices           Invoice[]
  referralsMade      Referral[] @relation("ReferrerRelation")
  referralsReceived  Referral[] @relation("ReferredRelation")
  promotionHistory   Promotion[]

  @@map("users")
}

// Promotion history model
model Promotion {
  id          String   @id @default(cuid())
  userId      String
  fromLevelId String?
  toLevelId   String
  reason      String   @default("Automatic promotion")
  metadata    Json?    // Store additional promotion data
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("promotions")
}

// Payment model for Stripe integration
model Payment {
  id                String        @id @default(cuid())
  userId            String
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("COP")
  status            PaymentStatus @default(PENDING)
  paymentMethod     String
  stripePaymentId   String?       @unique
  stripeSessionId   String?       @unique
  transactionId     String?
  referralId        String?
  description       String?
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  referral Referral? @relation(fields: [referralId], references: [id])
  invoice  Invoice?

  @@map("payments")
}

// Invoice model for PDF generation
model Invoice {
  id            String        @id @default(cuid())
  paymentId     String        @unique
  userId        String
  invoiceNumber String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("COP")
  status        InvoiceStatus @default(PENDING)
  concept       String
  pdfUrl        String?
  emailSent     Boolean       @default(false)
  emailSentAt   DateTime?
  dueDate       DateTime?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  payment Payment @relation(fields: [paymentId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("invoices")
}

// Referral model
model Referral {
  id         String          @id @default(cuid())
  referrerId String
  referredId String
  level      Int             @default(1)
  commission Decimal         @db.Decimal(10, 2)
  status     ReferralStatus  @default(PENDING)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // Relations
  referrer User      @relation("ReferrerRelation", fields: [referrerId], references: [id])
  referred User      @relation("ReferredRelation", fields: [referredId], references: [id])
  payments Payment[]

  @@unique([referrerId, referredId])
  @@map("referrals")
}

// Enums
enum Role {
  ADMIN
  AFFILIATE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum InvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum ReferralStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}
